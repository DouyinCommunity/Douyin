// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Douyin;
//
//    var welcome = Aweme.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Douyin
{

    public partial class Aweme
    {
        [JsonProperty("status_code")]
        public long StatusCode { get; set; }

        [JsonProperty("status_msg")]
        public string StatusMsg { get; set; }

        [JsonProperty("active_time")]
        public string ActiveTime { get; set; }

        [JsonProperty("aweme_list")]
        public List<AwemeList> AwemeList { get; set; }

        [JsonProperty("share_info")]
        public WelcomeShareInfo ShareInfo { get; set; }

        [JsonProperty("extra")]
        public Extra Extra { get; set; }

        [JsonProperty("log_pb")]
        public LogPb LogPb { get; set; }
    }

    public partial class AwemeList
    {
        [JsonProperty("aweme_info")]
        public AwemeInfo AwemeInfo { get; set; }

        [JsonProperty("label")]
        public long Label { get; set; }

        [JsonProperty("hot_value")]
        public long HotValue { get; set; }
    }

    public partial class AwemeInfo
    {
        [JsonProperty("video_labels")]
        public List<object> VideoLabels { get; set; }

        [JsonProperty("is_fantasy")]
        public bool IsFantasy { get; set; }

        [JsonProperty("long_video")]
        public List<LongVideo> LongVideo { get; set; }

        [JsonProperty("aweme_control")]
        public AwemeControl AwemeControl { get; set; }

        [JsonProperty("statistics")]
        public Statistics Statistics { get; set; }

        [JsonProperty("nickname_position")]
        public object NicknamePosition { get; set; }

        [JsonProperty("cmt_swt")]
        public bool CmtSwt { get; set; }

        [JsonProperty("origin_comment_ids")]
        public object OriginCommentIds { get; set; }

        [JsonProperty("distribute_type")]
        public long DistributeType { get; set; }

        [JsonProperty("create_time")]
        public long CreateTime { get; set; }

        [JsonProperty("is_top")]
        public long IsTop { get; set; }

        [JsonProperty("sort_label")]
        public string SortLabel { get; set; }

        [JsonProperty("uniqid_position")]
        public object UniqidPosition { get; set; }

        [JsonProperty("comment_list")]
        public object CommentList { get; set; }

        [JsonProperty("desc_language")]
        public DescLanguage DescLanguage { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }

        [JsonProperty("position")]
        public object Position { get; set; }

        [JsonProperty("bodydance_score")]
        public long BodydanceScore { get; set; }

        [JsonProperty("item_comment_settings")]
        public long ItemCommentSettings { get; set; }

        [JsonProperty("text_extra")]
        public List<TextExtra> TextExtra { get; set; }

        [JsonProperty("geofencing")]
        public List<object> Geofencing { get; set; }

        [JsonProperty("is_pgcshow")]
        public bool IsPgcshow { get; set; }

        [JsonProperty("commerce_config_data")]
        public object CommerceConfigData { get; set; }

        [JsonProperty("desc")]
        public string Desc { get; set; }

        [JsonProperty("share_url")]
        public Uri ShareUrl { get; set; }

        [JsonProperty("distance")]
        public string Distance { get; set; }

        [JsonProperty("vr_type")]
        public long VrType { get; set; }

        [JsonProperty("promotions")]
        public List<object> Promotions { get; set; }

        [JsonProperty("prevent_download")]
        public bool PreventDownload { get; set; }

        [JsonProperty("challenge_position")]
        public object ChallengePosition { get; set; }

        [JsonProperty("interaction_stickers")]
        public object InteractionStickers { get; set; }

        [JsonProperty("aweme_id")]
        public string AwemeId { get; set; }

        [JsonProperty("share_info")]
        public ChaListShareInfo ShareInfo { get; set; }

        [JsonProperty("author_user_id")]
        public long AuthorUserId { get; set; }

        [JsonProperty("item_duet")]
        public long ItemDuet { get; set; }

        [JsonProperty("cha_list")]
        public List<ChaList> ChaList { get; set; }

        [JsonProperty("region")]
        public Region Region { get; set; }

        [JsonProperty("rate")]
        public long Rate { get; set; }

        [JsonProperty("image_infos")]
        public object ImageInfos { get; set; }

        [JsonProperty("xigua_task")]
        public XiguaTask XiguaTask { get; set; }

        [JsonProperty("user_digged")]
        public long UserDigged { get; set; }

        [JsonProperty("is_vr")]
        public bool IsVr { get; set; }

        [JsonProperty("is_ads")]
        public bool IsAds { get; set; }

        [JsonProperty("is_hash_tag")]
        public long IsHashTag { get; set; }

        [JsonProperty("author")]
        public AwemeInfoAuthor Author { get; set; }

        [JsonProperty("label_top")]
        public ArakGroundhog LabelTop { get; set; }

        [JsonProperty("label_top_text")]
        public object LabelTopText { get; set; }

        [JsonProperty("music")]
        public Music Music { get; set; }

        [JsonProperty("video_text")]
        public List<object> VideoText { get; set; }

        [JsonProperty("risk_infos")]
        public RiskInfos RiskInfos { get; set; }

        [JsonProperty("ad_link_type")]
        public long AdLinkType { get; set; }

        [JsonProperty("video_control")]
        public VideoControl VideoControl { get; set; }

        [JsonProperty("aweme_type")]
        public long AwemeType { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("is_relieve")]
        public bool IsRelieve { get; set; }

        [JsonProperty("collect_stat")]
        public long CollectStat { get; set; }

        [JsonProperty("group_id")]
        public string GroupId { get; set; }

        [JsonProperty("with_promotional_music")]
        public bool WithPromotionalMusic { get; set; }

        [JsonProperty("item_react")]
        public long ItemReact { get; set; }

        [JsonProperty("video")]
        public Video Video { get; set; }

        [JsonProperty("hot_info", NullValueHandling = NullValueHandling.Ignore)]
        public HotInfo HotInfo { get; set; }

        [JsonProperty("has_vs_entry", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasVsEntry { get; set; }

        [JsonProperty("descendants", NullValueHandling = NullValueHandling.Ignore)]
        public Descendants Descendants { get; set; }

        [JsonProperty("poi_info", NullValueHandling = NullValueHandling.Ignore)]
        public PoiInfo PoiInfo { get; set; }
    }

    public partial class AwemeInfoAuthor
    {
        [JsonProperty("is_block")]
        public bool IsBlock { get; set; }

        [JsonProperty("is_gov_media_vip")]
        public bool IsGovMediaVip { get; set; }

        [JsonProperty("has_insights")]
        public bool HasInsights { get; set; }

        [JsonProperty("bind_phone")]
        public string BindPhone { get; set; }

        [JsonProperty("weibo_schema")]
        public string WeiboSchema { get; set; }

        [JsonProperty("user_period")]
        public long UserPeriod { get; set; }

        [JsonProperty("story_open")]
        public bool StoryOpen { get; set; }

        [JsonProperty("is_phone_binded")]
        public bool IsPhoneBinded { get; set; }

        [JsonProperty("reflow_page_gid")]
        public long ReflowPageGid { get; set; }

        [JsonProperty("item_list")]
        public object ItemList { get; set; }

        [JsonProperty("sec_uid")]
        public string SecUid { get; set; }

        [JsonProperty("google_account")]
        public string GoogleAccount { get; set; }

        [JsonProperty("gender")]
        public long Gender { get; set; }

        [JsonProperty("story_count")]
        public long StoryCount { get; set; }

        [JsonProperty("school_name")]
        public string SchoolName { get; set; }

        [JsonProperty("school_poi_id")]
        public string SchoolPoiId { get; set; }

        [JsonProperty("share_info")]
        public AuthorShareInfo ShareInfo { get; set; }

        [JsonProperty("has_orders")]
        public bool HasOrders { get; set; }

        [JsonProperty("react_setting")]
        public long ReactSetting { get; set; }

        [JsonProperty("avatar_thumb")]
        public ArakGroundhog AvatarThumb { get; set; }

        [JsonProperty("tw_expire_time")]
        public long TwExpireTime { get; set; }

        [JsonProperty("followers_detail")]
        public object FollowersDetail { get; set; }

        [JsonProperty("unique_id_modify_time")]
        public long UniqueIdModifyTime { get; set; }

        [JsonProperty("video_icon")]
        public ArakGroundhog VideoIcon { get; set; }

        [JsonProperty("duet_setting")]
        public long DuetSetting { get; set; }

        [JsonProperty("show_image_bubble")]
        public bool ShowImageBubble { get; set; }

        [JsonProperty("follower_count")]
        public long FollowerCount { get; set; }

        [JsonProperty("special_lock")]
        public long SpecialLock { get; set; }

        [JsonProperty("has_youtube_token")]
        public bool HasYoutubeToken { get; set; }

        [JsonProperty("platform_sync_info")]
        public object PlatformSyncInfo { get; set; }

        [JsonProperty("live_agreement_time")]
        public long LiveAgreementTime { get; set; }

        [JsonProperty("download_prompt_ts")]
        public long DownloadPromptTs { get; set; }

        [JsonProperty("live_commerce")]
        public bool LiveCommerce { get; set; }

        [JsonProperty("need_recommend")]
        public long NeedRecommend { get; set; }

        [JsonProperty("with_commerce_entry")]
        public bool WithCommerceEntry { get; set; }

        [JsonProperty("youtube_channel_id")]
        public string YoutubeChannelId { get; set; }

        [JsonProperty("comment_filter_status")]
        public long CommentFilterStatus { get; set; }

        [JsonProperty("custom_verify")]
        public CustomVerify CustomVerify { get; set; }

        [JsonProperty("comment_setting")]
        public long CommentSetting { get; set; }

        [JsonProperty("new_story_cover")]
        public object NewStoryCover { get; set; }

        [JsonProperty("reflow_page_uid")]
        public long ReflowPageUid { get; set; }

        [JsonProperty("language")]
        public Language Language { get; set; }

        [JsonProperty("follow_status")]
        public long FollowStatus { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("weibo_url")]
        public string WeiboUrl { get; set; }

        [JsonProperty("ins_id")]
        public string InsId { get; set; }

        [JsonProperty("twitter_name")]
        public string TwitterName { get; set; }

        [JsonProperty("avatar_uri")]
        public string AvatarUri { get; set; }

        [JsonProperty("hide_search")]
        public bool HideSearch { get; set; }

        [JsonProperty("constellation")]
        public long Constellation { get; set; }

        [JsonProperty("fb_expire_time")]
        public long FbExpireTime { get; set; }

        [JsonProperty("share_qrcode_uri")]
        public string ShareQrcodeUri { get; set; }

        [JsonProperty("aweme_count")]
        public long AwemeCount { get; set; }

        [JsonProperty("favoriting_count")]
        public long FavoritingCount { get; set; }

        [JsonProperty("weibo_name")]
        public string WeiboName { get; set; }

        [JsonProperty("live_verify")]
        public long LiveVerify { get; set; }

        [JsonProperty("shield_follow_notice")]
        public long ShieldFollowNotice { get; set; }

        [JsonProperty("with_fusion_shop_entry")]
        public bool WithFusionShopEntry { get; set; }

        [JsonProperty("user_canceled")]
        public bool UserCanceled { get; set; }

        [JsonProperty("create_time")]
        public long CreateTime { get; set; }

        [JsonProperty("type_label")]
        public object TypeLabel { get; set; }

        [JsonProperty("nickname")]
        public string Nickname { get; set; }

        [JsonProperty("signature")]
        public string Signature { get; set; }

        [JsonProperty("avatar_medium")]
        public ArakGroundhog AvatarMedium { get; set; }

        [JsonProperty("total_favorited")]
        public long TotalFavorited { get; set; }

        [JsonProperty("follower_status")]
        public long FollowerStatus { get; set; }

        [JsonProperty("neiguang_shield")]
        public long NeiguangShield { get; set; }

        [JsonProperty("cv_level")]
        public string CvLevel { get; set; }

        [JsonProperty("avatar_168x168")]
        public ArakGroundhog Avatar168X168 { get; set; }

        [JsonProperty("relative_users")]
        public object RelativeUsers { get; set; }

        [JsonProperty("authority_status")]
        public long AuthorityStatus { get; set; }

        [JsonProperty("school_type")]
        public long SchoolType { get; set; }

        [JsonProperty("enterprise_verify_reason")]
        public string EnterpriseVerifyReason { get; set; }

        [JsonProperty("secret")]
        public long Secret { get; set; }

        [JsonProperty("user_mode")]
        public long UserMode { get; set; }

        [JsonProperty("is_star")]
        public bool IsStar { get; set; }

        [JsonProperty("following_count")]
        public long FollowingCount { get; set; }

        [JsonProperty("has_twitter_token")]
        public bool HasTwitterToken { get; set; }

        [JsonProperty("with_shop_entry")]
        public bool WithShopEntry { get; set; }

        [JsonProperty("weibo_verify")]
        public string WeiboVerify { get; set; }

        [JsonProperty("youtube_expire_time")]
        public long YoutubeExpireTime { get; set; }

        [JsonProperty("room_id")]
        public long RoomId { get; set; }

        [JsonProperty("sync_to_toutiao")]
        public long SyncToToutiao { get; set; }

        [JsonProperty("accept_private_policy")]
        public bool AcceptPrivatePolicy { get; set; }

        [JsonProperty("cover_url")]
        public List<ArakGroundhog> CoverUrl { get; set; }

        [JsonProperty("prevent_download")]
        public bool PreventDownload { get; set; }

        [JsonProperty("avatar_300x300")]
        public ArakGroundhog Avatar300X300 { get; set; }

        [JsonProperty("is_binded_weibo")]
        public bool IsBindedWeibo { get; set; }

        [JsonProperty("shield_comment_notice")]
        public long ShieldCommentNotice { get; set; }

        [JsonProperty("region")]
        public Region Region { get; set; }

        [JsonProperty("user_rate")]
        public long UserRate { get; set; }

        [JsonProperty("has_unread_story")]
        public bool HasUnreadStory { get; set; }

        [JsonProperty("avatar_larger")]
        public ArakGroundhog AvatarLarger { get; set; }

        [JsonProperty("shield_digg_notice")]
        public long ShieldDiggNotice { get; set; }

        [JsonProperty("geofencing")]
        public List<object> Geofencing { get; set; }

        [JsonProperty("has_email")]
        public bool HasEmail { get; set; }

        [JsonProperty("download_setting")]
        public long DownloadSetting { get; set; }

        [JsonProperty("verify_info")]
        public string VerifyInfo { get; set; }

        [JsonProperty("unique_id")]
        public string UniqueId { get; set; }

        [JsonProperty("account_region")]
        public string AccountRegion { get; set; }

        [JsonProperty("live_agreement")]
        public long LiveAgreement { get; set; }

        [JsonProperty("with_dou_entry")]
        public bool WithDouEntry { get; set; }

        [JsonProperty("hide_location")]
        public bool HideLocation { get; set; }

        [JsonProperty("apple_account")]
        public long AppleAccount { get; set; }

        [JsonProperty("is_ad_fake")]
        public bool IsAdFake { get; set; }

        [JsonProperty("commerce_user_level")]
        public long CommerceUserLevel { get; set; }

        [JsonProperty("is_discipline_member")]
        public bool IsDisciplineMember { get; set; }

        [JsonProperty("twitter_id")]
        public string TwitterId { get; set; }

        [JsonProperty("cha_list")]
        public object ChaList { get; set; }

        [JsonProperty("short_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ShortId { get; set; }

        [JsonProperty("birthday")]
        public string Birthday { get; set; }

        [JsonProperty("is_verified")]
        public bool IsVerified { get; set; }

        [JsonProperty("has_facebook_token")]
        public bool HasFacebookToken { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("ad_cover_url")]
        public object AdCoverUrl { get; set; }

        [JsonProperty("uid")]
        public string Uid { get; set; }

        [JsonProperty("verification_type")]
        public long VerificationType { get; set; }

        [JsonProperty("youtube_channel_title")]
        public string YoutubeChannelTitle { get; set; }
    }

    public partial class ArakGroundhog
    {
        [JsonProperty("uri")]
        public string Uri { get; set; }

        [JsonProperty("url_list")]
        public List<Uri> UrlList { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("url_key", NullValueHandling = NullValueHandling.Ignore)]
        public string UrlKey { get; set; }
    }

    public partial class AuthorShareInfo
    {
        [JsonProperty("share_url")]
        public string ShareUrl { get; set; }

        [JsonProperty("share_weibo_desc")]
        public Share ShareWeiboDesc { get; set; }

        [JsonProperty("share_desc")]
        public string ShareDesc { get; set; }

        [JsonProperty("share_title")]
        public Share ShareTitle { get; set; }

        [JsonProperty("share_qrcode_url", NullValueHandling = NullValueHandling.Ignore)]
        public ArakGroundhog ShareQrcodeUrl { get; set; }

        [JsonProperty("share_title_myself")]
        public string ShareTitleMyself { get; set; }

        [JsonProperty("share_title_other")]
        public string ShareTitleOther { get; set; }

        [JsonProperty("bool_persist", NullValueHandling = NullValueHandling.Ignore)]
        public long? BoolPersist { get; set; }
    }

    public partial class AwemeControl
    {
        [JsonProperty("can_show_comment")]
        public bool CanShowComment { get; set; }

        [JsonProperty("can_forward")]
        public bool CanForward { get; set; }

        [JsonProperty("can_share")]
        public bool CanShare { get; set; }

        [JsonProperty("can_comment")]
        public bool CanComment { get; set; }
    }

    public partial class ChaList
    {
        [JsonProperty("connect_music")]
        public List<object> ConnectMusic { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("collect_stat")]
        public long CollectStat { get; set; }

        [JsonProperty("view_count")]
        public long ViewCount { get; set; }

        [JsonProperty("schema")]
        public string Schema { get; set; }

        [JsonProperty("share_info")]
        public ChaListShareInfo ShareInfo { get; set; }

        [JsonProperty("cid")]
        public string Cid { get; set; }

        [JsonProperty("cha_name")]
        public string ChaName { get; set; }

        [JsonProperty("author")]
        public ChaListAuthor Author { get; set; }

        [JsonProperty("user_count")]
        public long UserCount { get; set; }

        [JsonProperty("is_pgcshow")]
        public bool IsPgcshow { get; set; }

        [JsonProperty("is_challenge")]
        public long IsChallenge { get; set; }

        [JsonProperty("hashtag_profile")]
        public string HashtagProfile { get; set; }

        [JsonProperty("desc")]
        public string Desc { get; set; }

        [JsonProperty("sub_type")]
        public long SubType { get; set; }

        [JsonProperty("is_commerce")]
        public bool IsCommerce { get; set; }

        [JsonProperty("cha_attrs")]
        public object ChaAttrs { get; set; }
    }

    public partial class ChaListAuthor
    {
        [JsonProperty("cover_url")]
        public object CoverUrl { get; set; }

        [JsonProperty("item_list")]
        public object ItemList { get; set; }

        [JsonProperty("new_story_cover")]
        public object NewStoryCover { get; set; }

        [JsonProperty("type_label")]
        public object TypeLabel { get; set; }

        [JsonProperty("followers_detail")]
        public object FollowersDetail { get; set; }

        [JsonProperty("platform_sync_info")]
        public object PlatformSyncInfo { get; set; }

        [JsonProperty("geofencing")]
        public object Geofencing { get; set; }

        [JsonProperty("ad_cover_url")]
        public object AdCoverUrl { get; set; }

        [JsonProperty("relative_users")]
        public object RelativeUsers { get; set; }

        [JsonProperty("cha_list")]
        public object ChaList { get; set; }
    }

    public partial class ChaListShareInfo
    {
        [JsonProperty("share_signature_url")]
        public Uri ShareSignatureUrl { get; set; }

        [JsonProperty("share_signature_desc")]
        public ShareSignatureDesc ShareSignatureDesc { get; set; }

        [JsonProperty("share_weibo_desc")]
        public string ShareWeiboDesc { get; set; }

        [JsonProperty("share_desc")]
        public ShareDesc ShareDesc { get; set; }

        [JsonProperty("share_title")]
        public string ShareTitle { get; set; }

        [JsonProperty("bool_persist")]
        public long BoolPersist { get; set; }

        [JsonProperty("share_title_myself")]
        public string ShareTitleMyself { get; set; }

        [JsonProperty("share_title_other")]
        public string ShareTitleOther { get; set; }

        [JsonProperty("share_quote")]
        public string ShareQuote { get; set; }

        [JsonProperty("share_url")]
        public string ShareUrl { get; set; }

        [JsonProperty("share_link_desc", NullValueHandling = NullValueHandling.Ignore)]
        public string ShareLinkDesc { get; set; }
    }

    public partial class Descendants
    {
        [JsonProperty("platforms")]
        public List<string> Platforms { get; set; }

        [JsonProperty("notify_msg")]
        public string NotifyMsg { get; set; }
    }

    public partial class HotInfo
    {
        [JsonProperty("sentence")]
        public string Sentence { get; set; }

        [JsonProperty("challenge_id")]
        public string ChallengeId { get; set; }

        [JsonProperty("search_word")]
        public string SearchWord { get; set; }

        [JsonProperty("value")]
        public long Value { get; set; }

        [JsonProperty("rank")]
        public long Rank { get; set; }

        [JsonProperty("group_id")]
        public string GroupId { get; set; }
    }

    public partial class LongVideo
    {
        [JsonProperty("video_control")]
        public VideoControl VideoControl { get; set; }

        [JsonProperty("video")]
        public Video Video { get; set; }

        [JsonProperty("trailer_start_time")]
        public long TrailerStartTime { get; set; }
    }

    public partial class Video
    {
        [JsonProperty("ratio")]
        public Ratio Ratio { get; set; }

        [JsonProperty("has_watermark")]
        public bool HasWatermark { get; set; }

        [JsonProperty("play_addr_lowbr")]
        public ArakGroundhog PlayAddrLowbr { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("play_addr")]
        public ArakGroundhog PlayAddr { get; set; }

        [JsonProperty("cover")]
        public ArakGroundhog Cover { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("origin_cover")]
        public ArakGroundhog OriginCover { get; set; }

        [JsonProperty("is_h265")]
        public long IsH265 { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("bit_rate")]
        public List<BitRate> BitRate { get; set; }

        [JsonProperty("cdn_url_expired")]
        public long CdnUrlExpired { get; set; }

        [JsonProperty("dynamic_cover", NullValueHandling = NullValueHandling.Ignore)]
        public ArakGroundhog DynamicCover { get; set; }

        [JsonProperty("download_addr", NullValueHandling = NullValueHandling.Ignore)]
        public ArakGroundhog DownloadAddr { get; set; }

        [JsonProperty("has_download_suffix_logo_addr", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasDownloadSuffixLogoAddr { get; set; }

        [JsonProperty("download_suffix_logo_addr", NullValueHandling = NullValueHandling.Ignore)]
        public ArakGroundhog DownloadSuffixLogoAddr { get; set; }
    }

    public partial class BitRate
    {
        [JsonProperty("gear_name")]
        public GearName GearName { get; set; }

        [JsonProperty("quality_type")]
        public long QualityType { get; set; }

        [JsonProperty("bit_rate")]
        public long BitRateBitRate { get; set; }

        [JsonProperty("play_addr")]
        public ArakGroundhog PlayAddr { get; set; }

        [JsonProperty("is_h265")]
        public long IsH265 { get; set; }
    }

    public partial class VideoControl
    {
        [JsonProperty("allow_download")]
        public bool AllowDownload { get; set; }

        [JsonProperty("show_progress_bar")]
        public long ShowProgressBar { get; set; }

        [JsonProperty("draft_progress_bar")]
        public long DraftProgressBar { get; set; }

        [JsonProperty("allow_duet")]
        public bool AllowDuet { get; set; }

        [JsonProperty("allow_dynamic_wallpaper")]
        public bool AllowDynamicWallpaper { get; set; }

        [JsonProperty("share_type")]
        public long ShareType { get; set; }

        [JsonProperty("allow_react")]
        public bool AllowReact { get; set; }

        [JsonProperty("prevent_download_type")]
        public long PreventDownloadType { get; set; }

        [JsonProperty("timer_status")]
        public long TimerStatus { get; set; }
    }

    public partial class Music
    {
        [JsonProperty("collect_stat")]
        public long CollectStat { get; set; }

        [JsonProperty("binded_challenge_id")]
        public long BindedChallengeId { get; set; }

        [JsonProperty("redirect")]
        public bool Redirect { get; set; }

        [JsonProperty("author")]
        public string Author { get; set; }

        [JsonProperty("album")]
        public string Album { get; set; }

        [JsonProperty("position")]
        public object Position { get; set; }

        [JsonProperty("is_original_sound")]
        public bool IsOriginalSound { get; set; }

        [JsonProperty("reason_type")]
        public long ReasonType { get; set; }

        [JsonProperty("cover_hd")]
        public ArakGroundhog CoverHd { get; set; }

        [JsonProperty("extra")]
        public string Extra { get; set; }

        [JsonProperty("avatar_medium", NullValueHandling = NullValueHandling.Ignore)]
        public ArakGroundhog AvatarMedium { get; set; }

        [JsonProperty("end_time")]
        public long EndTime { get; set; }

        [JsonProperty("owner_id", NullValueHandling = NullValueHandling.Ignore)]
        public string OwnerId { get; set; }

        [JsonProperty("is_restricted")]
        public bool IsRestricted { get; set; }

        [JsonProperty("is_video_self_see")]
        public bool IsVideoSelfSee { get; set; }

        [JsonProperty("avatar_large", NullValueHandling = NullValueHandling.Ignore)]
        public ArakGroundhog AvatarLarge { get; set; }

        [JsonProperty("cover_medium")]
        public ArakGroundhog CoverMedium { get; set; }

        [JsonProperty("cover_thumb")]
        public ArakGroundhog CoverThumb { get; set; }

        [JsonProperty("source_platform")]
        public long SourcePlatform { get; set; }

        [JsonProperty("shoot_duration")]
        public long ShootDuration { get; set; }

        [JsonProperty("prevent_download")]
        public bool PreventDownload { get; set; }

        [JsonProperty("prevent_item_download_status")]
        public long PreventItemDownloadStatus { get; set; }

        [JsonProperty("sec_uid", NullValueHandling = NullValueHandling.Ignore)]
        public string SecUid { get; set; }

        [JsonProperty("is_commerce_music")]
        public bool IsCommerceMusic { get; set; }

        [JsonProperty("cover_large")]
        public ArakGroundhog CoverLarge { get; set; }

        [JsonProperty("schema_url")]
        public string SchemaUrl { get; set; }

        [JsonProperty("user_count")]
        public long UserCount { get; set; }

        [JsonProperty("mid")]
        public string Mid { get; set; }

        [JsonProperty("author_position")]
        public object AuthorPosition { get; set; }

        [JsonProperty("external_song_info")]
        public List<object> ExternalSongInfo { get; set; }

        [JsonProperty("audition_duration")]
        public long AuditionDuration { get; set; }

        [JsonProperty("id_str")]
        public string IdStr { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("start_time")]
        public long StartTime { get; set; }

        [JsonProperty("unshelve_countries")]
        public object UnshelveCountries { get; set; }

        [JsonProperty("avatar_thumb", NullValueHandling = NullValueHandling.Ignore)]
        public ArakGroundhog AvatarThumb { get; set; }

        [JsonProperty("preview_end_time")]
        public long PreviewEndTime { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("owner_nickname")]
        public string OwnerNickname { get; set; }

        [JsonProperty("is_original")]
        public bool IsOriginal { get; set; }

        [JsonProperty("offline_desc")]
        public string OfflineDesc { get; set; }

        [JsonProperty("is_del_video")]
        public bool IsDelVideo { get; set; }

        [JsonProperty("preview_start_time")]
        public long PreviewStartTime { get; set; }

        [JsonProperty("id")]
        public double Id { get; set; }

        [JsonProperty("play_url")]
        public ArakGroundhog PlayUrl { get; set; }

        [JsonProperty("status")]
        public long Status { get; set; }

        [JsonProperty("author_deleted")]
        public bool AuthorDeleted { get; set; }

        [JsonProperty("owner_handle")]
        public string OwnerHandle { get; set; }

        [JsonProperty("strong_beat_url", NullValueHandling = NullValueHandling.Ignore)]
        public ArakGroundhog StrongBeatUrl { get; set; }

        [JsonProperty("audio_track", NullValueHandling = NullValueHandling.Ignore)]
        public ArakGroundhog AudioTrack { get; set; }
    }

    public partial class PoiInfo
    {
        [JsonProperty("poi_id")]
        public string PoiId { get; set; }

        [JsonProperty("user_count")]
        public long UserCount { get; set; }

        [JsonProperty("view_count")]
        public string ViewCount { get; set; }

        [JsonProperty("item_count")]
        public long ItemCount { get; set; }

        [JsonProperty("poi_longitude")]
        public double PoiLongitude { get; set; }

        [JsonProperty("icon_on_info")]
        public ArakGroundhog IconOnInfo { get; set; }

        [JsonProperty("cover_hd")]
        public ArakGroundhog CoverHd { get; set; }

        [JsonProperty("cover_large")]
        public ArakGroundhog CoverLarge { get; set; }

        [JsonProperty("poi_subtitle_type")]
        public long PoiSubtitleType { get; set; }

        [JsonProperty("is_admin_area")]
        public bool IsAdminArea { get; set; }

        [JsonProperty("address_info")]
        public AddressInfo AddressInfo { get; set; }

        [JsonProperty("icon_type")]
        public long IconType { get; set; }

        [JsonProperty("icon_on_entry")]
        public ArakGroundhog IconOnEntry { get; set; }

        [JsonProperty("type_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TypeCode { get; set; }

        [JsonProperty("cover_thumb")]
        public ArakGroundhog CoverThumb { get; set; }

        [JsonProperty("collect_stat")]
        public long CollectStat { get; set; }

        [JsonProperty("poi_latitude")]
        public double PoiLatitude { get; set; }

        [JsonProperty("voucher_release_areas")]
        public object VoucherReleaseAreas { get; set; }

        [JsonProperty("poi_frontend_type")]
        public object PoiFrontendType { get; set; }

        [JsonProperty("poi_backend_type")]
        public PoiBackendType PoiBackendType { get; set; }

        [JsonProperty("show_type")]
        public long ShowType { get; set; }

        [JsonProperty("poi_name")]
        public string PoiName { get; set; }

        [JsonProperty("share_info")]
        public AuthorShareInfo ShareInfo { get; set; }

        [JsonProperty("cover_medium")]
        public ArakGroundhog CoverMedium { get; set; }

        [JsonProperty("distance")]
        public string Distance { get; set; }

        [JsonProperty("expand_type")]
        public long ExpandType { get; set; }

        [JsonProperty("icon_on_map")]
        public ArakGroundhog IconOnMap { get; set; }
    }

    public partial class AddressInfo
    {
        [JsonProperty("province")]
        public string Province { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("district")]
        public string District { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("simple_addr")]
        public string SimpleAddr { get; set; }

        [JsonProperty("city_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CityCode { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("country_code")]
        public Region CountryCode { get; set; }
    }

    public partial class PoiBackendType
    {
        [JsonProperty("code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Code { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class RiskInfos
    {
        [JsonProperty("vote")]
        public bool Vote { get; set; }

        [JsonProperty("warn")]
        public bool Warn { get; set; }

        [JsonProperty("risk_sink")]
        public bool RiskSink { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("content")]
        public string Content { get; set; }
    }

    public partial class Statistics
    {
        [JsonProperty("aweme_id")]
        public string AwemeId { get; set; }

        [JsonProperty("digg_count")]
        public long DiggCount { get; set; }

        [JsonProperty("download_count")]
        public long DownloadCount { get; set; }

        [JsonProperty("play_count")]
        public long PlayCount { get; set; }

        [JsonProperty("share_count")]
        public long ShareCount { get; set; }

        [JsonProperty("forward_count")]
        public long ForwardCount { get; set; }

        [JsonProperty("lose_comment_count")]
        public long LoseCommentCount { get; set; }

        [JsonProperty("comment_count")]
        public long CommentCount { get; set; }

        [JsonProperty("lose_count")]
        public long LoseCount { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("download_status")]
        public long DownloadStatus { get; set; }

        [JsonProperty("is_delete")]
        public bool IsDelete { get; set; }

        [JsonProperty("allow_share")]
        public bool AllowShare { get; set; }

        [JsonProperty("is_private")]
        public bool IsPrivate { get; set; }

        [JsonProperty("with_goods")]
        public bool WithGoods { get; set; }

        [JsonProperty("reviewed")]
        public long Reviewed { get; set; }

        [JsonProperty("is_prohibited")]
        public bool IsProhibited { get; set; }

        [JsonProperty("aweme_id")]
        public string AwemeId { get; set; }

        [JsonProperty("allow_comment")]
        public bool AllowComment { get; set; }

        [JsonProperty("private_status")]
        public long PrivateStatus { get; set; }

        [JsonProperty("with_fusion_goods")]
        public bool WithFusionGoods { get; set; }

        [JsonProperty("in_reviewing")]
        public bool InReviewing { get; set; }

        [JsonProperty("self_see")]
        public bool SelfSee { get; set; }
    }

    public partial class TextExtra
    {
        [JsonProperty("start")]
        public long Start { get; set; }

        [JsonProperty("end")]
        public long End { get; set; }

        [JsonProperty("type")]
        public long Type { get; set; }

        [JsonProperty("hashtag_name", NullValueHandling = NullValueHandling.Ignore)]
        public string HashtagName { get; set; }

        [JsonProperty("hashtag_id", NullValueHandling = NullValueHandling.Ignore)]
        public string HashtagId { get; set; }

        [JsonProperty("is_commerce", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsCommerce { get; set; }

        [JsonProperty("sec_uid", NullValueHandling = NullValueHandling.Ignore)]
        public string SecUid { get; set; }

        [JsonProperty("user_id", NullValueHandling = NullValueHandling.Ignore)]
        public string UserId { get; set; }
    }

    public partial class XiguaTask
    {
        [JsonProperty("is_xigua_task")]
        public bool IsXiguaTask { get; set; }
    }

    public partial class Extra
    {
        [JsonProperty("now")]
        public long Now { get; set; }

        [JsonProperty("fatal_item_ids")]
        public List<object> FatalItemIds { get; set; }

        [JsonProperty("logid")]
        public string Logid { get; set; }
    }

    public partial class LogPb
    {
        [JsonProperty("impr_id")]
        public string ImprId { get; set; }
    }

    public partial class WelcomeShareInfo
    {
        [JsonProperty("share_url")]
        public Uri ShareUrl { get; set; }

        [JsonProperty("share_title")]
        public string ShareTitle { get; set; }

        [JsonProperty("share_link_desc")]
        public string ShareLinkDesc { get; set; }
    }

    public enum CustomVerify { Empty, 优质视频创作者, 央视新闻官方账号 };

    public enum Language { ZhHans };

    public enum Region { Cn, Empty };

    public enum Share { Empty, 洛阳市附近超多有趣的抖音视频一起来玩戳这里,Other };

    public enum ShareDesc { Empty, 在抖音记录美好生活 };

    public enum ShareSignatureDesc { TikTokMakeEverySecondCount };

    public enum DescLanguage { Un, Zh };

    public enum GearName { Normal360, Normal480,Normal720 };

    public enum Ratio { The480P, The720P };

    public partial class Aweme
    {
        public static Aweme FromJson(string json) => JsonConvert.DeserializeObject<Aweme>(json, Douyin.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Aweme self) => JsonConvert.SerializeObject(self, Douyin.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CustomVerifyConverter.Singleton,
                LanguageConverter.Singleton,
                RegionConverter.Singleton,
                ShareConverter.Singleton,
                ShareDescConverter.Singleton,
                ShareSignatureDescConverter.Singleton,
                DescLanguageConverter.Singleton,
                GearNameConverter.Singleton,
                RatioConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CustomVerifyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CustomVerify) || t == typeof(CustomVerify?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return CustomVerify.Empty;
                case "优质视频创作者":
                    return CustomVerify.优质视频创作者;
                case "央视新闻官方账号":
                    return CustomVerify.央视新闻官方账号;
                default:
                    return CustomVerify.Empty;
            }
            throw new Exception("Cannot unmarshal type CustomVerify");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CustomVerify)untypedValue;
            switch (value)
            {
                case CustomVerify.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case CustomVerify.优质视频创作者:
                    serializer.Serialize(writer, "优质视频创作者");
                    return;
                case CustomVerify.央视新闻官方账号:
                    serializer.Serialize(writer, "央视新闻官方账号");
                    return;
            }
            throw new Exception("Cannot marshal type CustomVerify");
        }

        public static readonly CustomVerifyConverter Singleton = new CustomVerifyConverter();
    }

    internal class LanguageConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Language) || t == typeof(Language?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "zh-Hans")
            {
                return Language.ZhHans;
            }
            throw new Exception("Cannot unmarshal type Language");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Language)untypedValue;
            if (value == Language.ZhHans)
            {
                serializer.Serialize(writer, "zh-Hans");
                return;
            }
            throw new Exception("Cannot marshal type Language");
        }

        public static readonly LanguageConverter Singleton = new LanguageConverter();
    }

    internal class RegionConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Region) || t == typeof(Region?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Region.Empty;
                case "CN":
                    return Region.Cn;
            }
            throw new Exception("Cannot unmarshal type Region");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Region)untypedValue;
            switch (value)
            {
                case Region.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Region.Cn:
                    serializer.Serialize(writer, "CN");
                    return;
            }
            throw new Exception("Cannot marshal type Region");
        }

        public static readonly RegionConverter Singleton = new RegionConverter();
    }

    internal class ShareConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Share) || t == typeof(Share?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return Share.Empty;
                case "洛阳市附近超多有趣的抖音视频，一起来玩，戳这里":
                    return Share.洛阳市附近超多有趣的抖音视频一起来玩戳这里;
                default:
                    return Share.Other;
            }
            throw new Exception("Cannot unmarshal type Share");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Share)untypedValue;
            switch (value)
            {
                case Share.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case Share.洛阳市附近超多有趣的抖音视频一起来玩戳这里:
                    serializer.Serialize(writer, "洛阳市附近超多有趣的抖音视频，一起来玩，戳这里");
                    return;
                case Share.Other:
                     serializer.Serialize(writer, untypedValue.ToString());
                    return;
            }
            throw new Exception("Cannot marshal type Share");
        }

        public static readonly ShareConverter Singleton = new ShareConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class ShareDescConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ShareDesc) || t == typeof(ShareDesc?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return ShareDesc.Empty;
                case "在抖音，记录美好生活":
                    return ShareDesc.在抖音记录美好生活;
            }
            throw new Exception("Cannot unmarshal type ShareDesc");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ShareDesc)untypedValue;
            switch (value)
            {
                case ShareDesc.Empty:
                    serializer.Serialize(writer, "");
                    return;
                case ShareDesc.在抖音记录美好生活:
                    serializer.Serialize(writer, "在抖音，记录美好生活");
                    return;
            }
            throw new Exception("Cannot marshal type ShareDesc");
        }

        public static readonly ShareDescConverter Singleton = new ShareDescConverter();
    }

    internal class ShareSignatureDescConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ShareSignatureDesc) || t == typeof(ShareSignatureDesc?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "TikTok: Make Every Second Count")
            {
                return ShareSignatureDesc.TikTokMakeEverySecondCount;
            }
            throw new Exception("Cannot unmarshal type ShareSignatureDesc");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ShareSignatureDesc)untypedValue;
            if (value == ShareSignatureDesc.TikTokMakeEverySecondCount)
            {
                serializer.Serialize(writer, "TikTok: Make Every Second Count");
                return;
            }
            throw new Exception("Cannot marshal type ShareSignatureDesc");
        }

        public static readonly ShareSignatureDescConverter Singleton = new ShareSignatureDescConverter();
    }

    internal class DescLanguageConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DescLanguage) || t == typeof(DescLanguage?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "un":
                    return DescLanguage.Un;
                case "zh":
                    return DescLanguage.Zh;
            }
            throw new Exception("Cannot unmarshal type DescLanguage");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DescLanguage)untypedValue;
            switch (value)
            {
                case DescLanguage.Un:
                    serializer.Serialize(writer, "un");
                    return;
                case DescLanguage.Zh:
                    serializer.Serialize(writer, "zh");
                    return;
            }
            throw new Exception("Cannot marshal type DescLanguage");
        }

        public static readonly DescLanguageConverter Singleton = new DescLanguageConverter();
    }

    internal class GearNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(GearName) || t == typeof(GearName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "normal_360":
                    return GearName.Normal360;
                case "normal_480":
                    return GearName.Normal480;
                case "normal_720":
                    return GearName.Normal720;   
            }
            throw new Exception("Cannot unmarshal type GearName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (GearName)untypedValue;
            switch (value)
            {
                case GearName.Normal360:
                    serializer.Serialize(writer, "normal_360");
                    return;
                case GearName.Normal480:
                    serializer.Serialize(writer, "normal_480");
                    return;
                case GearName.Normal720:
                    serializer.Serialize(writer, "normal_720");
                    return;
            }
            throw new Exception("Cannot marshal type GearName");
        }

        public static readonly GearNameConverter Singleton = new GearNameConverter();
    }

    internal class RatioConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Ratio) || t == typeof(Ratio?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "720p")
            {
                return Ratio.The720P;
            }
            else if (value == "480p")
            {
                return Ratio.The480P;
            }
            throw new Exception("Cannot unmarshal type Ratio");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Ratio)untypedValue;
            if (value == Ratio.The720P)
            {
                serializer.Serialize(writer, "720p");
                return;
            }
            else if (value == Ratio.The480P)
            {
                serializer.Serialize(writer, "480p");
                return;
            }
            throw new Exception("Cannot marshal type Ratio");
        }

        public static readonly RatioConverter Singleton = new RatioConverter();
    }
}
